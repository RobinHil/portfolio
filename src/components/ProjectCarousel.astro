---
export interface Slide {
  imagePath: string;
  alt: string;
  title: string;
  description: string;
}

interface Props {
  slides: Slide[];
  id?: string;
}

const { slides, id = "project-carousel" } = Astro.props;
---

<div class="carousel-container mb-6 sm:mb-8 md:mb-12" id={id}>
  <!-- Slides container -->
  <div class="carousel-slides relative bg-zinc-900/50 border border-zinc-800/80 sm:border-2 rounded-lg sm:rounded-xl shadow-lg sm:shadow-xl overflow-hidden">
    {slides.map((slide, index) => (
      <div class={`carousel-slide ${index === 0 ? 'active' : ''}`} data-index={index}>
        <!-- Image container - Hauteur adaptative selon l'écran -->
        <div class="flex justify-center items-center p-2 sm:p-4 md:p-6 bg-zinc-900/30 relative h-[180px] sm:h-[220px] md:h-[300px] lg:h-[350px]">
          <img 
            src={slide.imagePath} 
            class="max-h-[140px] sm:max-h-[180px] md:max-h-[250px] lg:max-h-[300px] max-w-full w-auto object-contain rounded-md sm:rounded-lg shadow-md sm:shadow-lg cursor-pointer hover:opacity-90 transition-opacity"
            alt={slide.alt}
            onclick={`window.open('${slide.imagePath}', '_blank')`}
            loading={index === 0 ? "eager" : "lazy"}
          />
          <div class="absolute top-1 right-1 sm:top-2 sm:right-2 md:top-3 md:right-3 bg-purple-600/90 text-white text-[8px] sm:text-xs md:text-sm font-bold px-1 py-0.5 sm:px-2 sm:py-1 rounded-full shadow-md sm:shadow-lg">
            {index + 1}/{slides.length}
          </div>
        </div>
        
        <!-- Text container - Police et padding adaptatifs -->
        <div class="p-2 sm:p-3 md:p-5 bg-gradient-to-b from-zinc-900/80 to-zinc-900/95">
          <h3 class="text-sm sm:text-base md:text-lg lg:text-xl font-bold text-white mb-1 sm:mb-2 line-clamp-2">{slide.title}</h3>
          <p class="text-zinc-300 text-[10px] sm:text-xs md:text-sm line-clamp-3 sm:line-clamp-2 md:line-clamp-none">{slide.description}</p>
        </div>
      </div>
    ))}
    
    <!-- Controls - Taille des boutons adaptative -->
    <button class="carousel-prev absolute top-1/2 left-1 sm:left-2 md:left-3 -translate-y-1/2 z-10 bg-zinc-800/70 hover:bg-purple-600/70 w-5 h-5 sm:w-7 sm:h-7 md:w-9 md:h-9 rounded-full flex items-center justify-center transition-colors duration-300 backdrop-blur-sm">
      <svg class="w-2 h-2 sm:w-3 sm:h-3 md:w-4 md:h-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
      </svg>
      <span class="sr-only">Précédent</span>
    </button>
    
    <button class="carousel-next absolute top-1/2 right-1 sm:right-2 md:right-3 -translate-y-1/2 z-10 bg-zinc-800/70 hover:bg-purple-600/70 w-5 h-5 sm:w-7 sm:h-7 md:w-9 md:h-9 rounded-full flex items-center justify-center transition-colors duration-300 backdrop-blur-sm">
      <svg class="w-2 h-2 sm:w-3 sm:h-3 md:w-4 md:h-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
      </svg>
      <span class="sr-only">Suivant</span>
    </button>
  </div>
  
  <!-- Indicators - Taille adaptative selon l'écran -->
  <div class="carousel-indicators flex justify-center mt-2 sm:mt-3 md:mt-4 space-x-1 sm:space-x-1.5 md:space-x-2 overflow-x-auto py-1 sm:py-2 px-1 sm:px-2">
    {slides.map((_, index) => (
      <button 
        class={`carousel-indicator w-1.5 h-1.5 sm:w-2 sm:h-2 md:w-2.5 md:h-2.5 rounded-full transition-all duration-300 flex-shrink-0 ${index === 0 ? 'bg-purple-500 scale-125' : 'bg-white/30 hover:bg-white/60'}`}
        aria-label={`Slide ${index + 1}`}
        data-index={index}>
      </button>
    ))}
  </div>
</div>

<style>
  .carousel-slide {
    display: none;
  }
  
  .carousel-slide.active {
    display: block;
    animation: fadeIn 0.5s ease forwards;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script define:vars={{ id, slidesCount: slides.length }}>
  // Script auto-exécutable pour s'assurer qu'il fonctionne dès le chargement
  (function() {
    const container = document.getElementById(id);
    if (!container) return;
    
    const slides = container.querySelectorAll('.carousel-slide');
    const indicators = container.querySelectorAll('.carousel-indicator');
    const prevButton = container.querySelector('.carousel-prev');
    const nextButton = container.querySelector('.carousel-next');
    
    let currentIndex = 0;
    let touchStartX = 0;
    let touchEndX = 0;
    
    // Fonction pour afficher un slide spécifique
    function showSlide(index) {
      // S'assurer que l'index est dans les limites
      if (index < 0) index = slides.length - 1;
      if (index >= slides.length) index = 0;
      
      // Cacher tous les slides et désactiver tous les indicateurs
      slides.forEach(slide => slide.classList.remove('active'));
      indicators.forEach(indicator => {
        indicator.classList.remove('bg-purple-500', 'scale-125');
        indicator.classList.add('bg-white/30');
      });
      
      // Afficher le slide actif et activer son indicateur
      slides[index].classList.add('active');
      indicators[index].classList.remove('bg-white/30');
      indicators[index].classList.add('bg-purple-500', 'scale-125');
      
      currentIndex = index;
    }
    
    // Support tactile pour le swipe
    container.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });
    
    container.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });
    
    function handleSwipe() {
      const threshold = 50; // Seuil minimal pour considérer un swipe
      if (touchStartX - touchEndX > threshold) {
        // Swipe vers la gauche -> slide suivant
        showSlide(currentIndex + 1);
      } else if (touchEndX - touchStartX > threshold) {
        // Swipe vers la droite -> slide précédent
        showSlide(currentIndex - 1);
      }
    }
    
    // Ajouter les écouteurs d'événements
    prevButton?.addEventListener('click', () => showSlide(currentIndex - 1));
    nextButton?.addEventListener('click', () => showSlide(currentIndex + 1));
    
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => showSlide(index));
    });
    
    // Navigation au clavier uniquement lorsque le carousel est visible dans le viewport
    document.addEventListener('keydown', (e) => {
      const rect = container.getBoundingClientRect();
      const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;
      
      if (isInViewport) {
        if (e.key === 'ArrowLeft') showSlide(currentIndex - 1);
        if (e.key === 'ArrowRight') showSlide(currentIndex + 1);
      }
    });
    
    // Défilement automatique optionnel (désactivé par défaut)
    // Décommentez pour activer
    let autoplayInterval;
    
    function startAutoplay() {
      autoplayInterval = setInterval(() => {
        showSlide(currentIndex + 1);
      }, 5000); // Change de slide toutes les 5 secondes
    }
    
    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }
    
    // Arrêter l'autoplay au survol
    container.addEventListener('mouseenter', stopAutoplay);
    container.addEventListener('touchstart', stopAutoplay, { passive: true });
    
    // Reprendre l'autoplay lorsque la souris quitte le carrousel
    container.addEventListener('mouseleave', startAutoplay);
    container.addEventListener('touchend', startAutoplay, { passive: true });
    
    // Démarrer l'autoplay
    startAutoplay();
  })();
</script>