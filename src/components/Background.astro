---
const starConfig = {
  count: 150,
  constellations: 15
};
---

<div class="fixed inset-0 -z-10">
  <div class="absolute inset-0 bg-zinc-950">
    <div class="stars">
      {Array.from({ length: starConfig.count }).map((_, i) => (
        <div
          class="star"
          style={`
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            width: ${Math.random() * 2 + 1}px;
            height: ${Math.random() * 2 + 1}px;
            animation-delay: ${Math.random() * 5}s;
          `}
        />
      ))}
    </div>

    <div class="constellations">
      {Array.from({ length: starConfig.constellations }).map((_, i) => {
        const size = Math.random() * 200 + 100;
        const points = Array.from({ length: Math.floor(Math.random() * 4) + 3 }).map(() => ({
          x: Math.random() * 100,
          y: Math.random() * 100
        }));
        
        return (
          <div
            class="constellation"
            style={`
              left: ${Math.random() * 90}%;
              top: ${Math.random() * 90}%;
              width: ${size}px;
              height: ${size}px;
              animation-delay: ${Math.random() * 5}s;
            `}
          >
            {points.map((point) => (
              <div
                class="constellation-star"
                style={`left: ${point.x}%; top: ${point.y}%;`}
              />
            ))}
            
            {points.slice(0, -1).map((point, index) => {
              const nextPoint = points[index + 1];
              const dx = (nextPoint.x - point.x) * size / 100;
              const dy = (nextPoint.y - point.y) * size / 100;
              const length = Math.sqrt(dx * dx + dy * dy);
              const angle = Math.atan2(dy, dx) * 180 / Math.PI;
              
              return (
                <div
                  class="constellation-line"
                  style={`
                    left: ${point.x}%;
                    top: ${point.y}%;
                    width: ${length}px;
                    transform: rotate(${angle}deg);
                  `}
                />
              );
            })}
          </div>
        );
      })}
    </div>
  </div>
</div>

<style>
  .stars {
    position: absolute;
    inset: 0;
    overflow: hidden;
  }

  .star {
    position: absolute;
    background: white;
    border-radius: 50%;
    opacity: 0;
    animation: twinkle 3s ease-in-out infinite;
  }

  .constellations {
    position: absolute;
    inset: 0;
    overflow: hidden;
  }

  .constellation {
    position: absolute;
    animation: float 30s ease-in-out infinite;
  }

  .constellation-star {
    position: absolute;
    width: 3px;
    height: 3px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    box-shadow: 0 0 8px rgba(255, 255, 255, 0.6);
    animation: twinkle 4s ease-in-out infinite;
  }

  .constellation-line {
    position: absolute;
    height: 1px;
    transform-origin: 0 0;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0.3) 50%,
      rgba(255, 255, 255, 0.1)
    );
  }

  @keyframes twinkle {
    0%, 100% {
      opacity: 0.3;
      transform: scale(0.8);
    }
    50% {
      opacity: 1;
      transform: scale(1.2);
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translate(0, 0) rotate(0deg);
    }
    25% {
      transform: translate(10px, 10px) rotate(1deg);
    }
    75% {
      transform: translate(-10px, -10px) rotate(-1deg);
    }
  }
</style>